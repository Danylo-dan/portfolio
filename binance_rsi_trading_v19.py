# -*- coding: utf-8 -*-
import sys
import io
sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')
# –Ü–º–ø–æ—Ä—Ç–∏
import time
import ccxt
import pandas as pd
import numpy as np
from datetime import datetime, timezone
import pytz
import config
import matplotlib.pyplot as plt
import matplotlib.dates as mdates 
import mplfinance as mpf
import os
import requests
from colorama import Fore, Style, init
import platform

init(autoreset=True, strip=False)

# –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–∏—ó–≤—Å—å–∫–∏–π —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å
KYIV_TZ = pytz.timezone('Europe/Kiev')
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–∞–ø–∫–∏ –≤—ñ–¥–Ω–æ—Å–Ω–æ –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–æ—ó —Å–∏—Å—Ç–µ–º–∏
signals_dir = (
    r"C:\programmes\other\Arbitrage\Arbitrage\binance_spot_signals" if platform.system() == "Windows"
    else r"C:\programmes\other\Arbitrage\Arbitrage\binance_spot_signals"
)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
CONFIG = {
    "timeframe":                       "1m",         # –¢–∞–π–º—Ñ—Ä–µ–π–º –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É (1 —Ö–≤–∏–ª–∏–Ω–∞)
    "stop_loss_percent":                1.0,         # –†—ñ–≤–µ–Ω—å —Å—Ç–æ–ø-–ª–æ—Å—É —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö –≤—ñ–¥ —Ü—ñ–Ω–∏ –≤—Ö–æ–¥—É
    "rsi_period":                       14,          # –ü–µ—Ä—ñ–æ–¥ RSI (Relative Strength Index)
    "rsi_overbought":                   70,          # –†—ñ–≤–µ–Ω—å –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–æ—Å—Ç—ñ RSI
    "rsi_oversold":                     30,          # –†—ñ–≤–µ–Ω—å –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–æ—Å—Ç—ñ RSI
    "rsi_bars_count":                   100,         # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–≤—ñ—á–æ–∫ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É RSI
    "commission_rate":                  0.001,       # –ö–æ–º—ñ—Å—ñ—è –±—ñ—Ä–∂—ñ –∑–∞ —É–≥–æ–¥—É (0.1%)
    "initial_balance":                  100.0,       # –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Å–∏–º—É–ª—è—Ü—ñ—ó –∞–±–æ —Ç–æ—Ä–≥—ñ–≤–ª—ñ
    "check_interval":                   60,          # –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª—ñ–≤ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    "monitor_interval":                 1,           # –ó–∞–≥–∞–ª—å–Ω–∏–π —ñ–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    "monitor_interval_rsi_high":        60,          # –Ü–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É, —è–∫—â–æ RSI –≤–∏—Å–æ–∫–∏–π (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    "monitor_interval_rsi_low":         10,          # –Ü–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É, —è–∫—â–æ RSI –Ω–∏–∑—å–∫–∏–π (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    "rsi_high_threshold":               70,          # –ü–æ—Ä—ñ–≥ RSI –¥–ª—è –≤–∏—Å–æ–∫–æ–≥–æ —Ä—ñ–≤–Ω—è
    "rsi_high_max":                     100,         # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è RSI, —â–æ –≤–≤–∞–∂–∞—î—Ç—å—Å—è "–¥—É–∂–µ –≤–∏—Å–æ–∫–∏–º"
    "rsi_low_threshold":                30,          # –ü–æ—Ä—ñ–≥ RSI –¥–ª—è –Ω–∏–∑—å–∫–æ–≥–æ —Ä—ñ–≤–Ω—è
    "rsi_low_min":                      0,           # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è RSI, —â–æ –≤–≤–∞–∂–∞—î—Ç—å—Å—è "–¥—É–∂–µ –Ω–∏–∑—å–∫–∏–º"
    "rsi_buy_exit_threshold":           40,          # –ü–æ—Ä—ñ–≥ RSI –¥–ª—è –≤–∏—Ö–æ–¥—É –∑ –ø–æ–∑–∏—Ü—ñ—ó –ø—Ä–∏ –∫—É–ø—ñ–≤–ª—ñ (take-profit)
    "min_volume":                       10000000,    # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–±—Å—è–≥ —Ç–æ—Ä–≥—ñ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó —Å–∏–≥–Ω–∞–ª—É
    "post_sell_delay":                  60,          # –ó–∞—Ç—Ä–∏–º–∫–∞ –ø—ñ—Å–ª—è –ø—Ä–æ–¥–∞–∂—É –ø–µ—Ä–µ–¥ –Ω–æ–≤–∏–º –≤—Ö–æ–¥–æ–º (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    "volume_filter_update_interval":    10800,       # –Ü–Ω—Ç–µ—Ä–≤–∞–ª –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞ –∑–∞ –æ–±—Å—è–≥–æ–º (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    "min_profit_percent":               0.20,        # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫ —É –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö –¥–ª—è —Ñ—ñ–∫—Å–∞—Ü—ñ—ó
    "profit_drop_percent":              0.10,        # –î–æ–ø—É—Å—Ç–∏–º–µ –ø–∞–¥—ñ–Ω–Ω—è –ø—Ä–∏–±—É—Ç–∫—É –ø–µ—Ä–µ–¥ —Ñ—ñ–∫—Å–∞—Ü—ñ—î—é (—Ç—Ä–µ–π–ª—ñ–Ω–≥)
    "lookback_right":                   5,           # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–≤—ñ—á–æ–∫ —Å–ø—Ä–∞–≤–∞ –¥–ª—è –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó (—Å–∏–≥–Ω–∞–ª—å–Ω–∞ –∑–æ–Ω–∞)
    "lookback_left":                    5,           # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–≤—ñ—á–æ–∫ –∑–ª—ñ–≤–∞ –¥–ª—è –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó (—Ä–µ—Ñ–µ—Ä–µ–Ω—Ç–Ω–∞ –∑–æ–Ω–∞)
    "range_upper":                      60,          # –í–µ—Ä—Ö–Ω—ñ–π –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø–æ—à—É–∫—É —Å–≤—ñ—á–æ–∫ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó
    "range_lower":                      5,           # –ù–∏–∂–Ω—ñ–π –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–ª—è –ø–æ—à—É–∫—É —Å–≤—ñ—á–æ–∫ –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü—ñ—ó
    "candles":                          1,           # –ó–º–µ–Ω—à–µ–Ω–æ –¥–æ 1 –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —É–≥–æ–¥
    "signals_dir":                      signals_dir,  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–º—ñ–Ω–Ω—É
    "blacklist_symbols":                ["BNB/USDT", "LAYER/USDT", "BTC/USDT", "ADA/USDT", "EUR/USDT"],  # –Ü–≥–Ω–æ—Ä–æ–≤–∞–Ω—ñ –ø–∞—Ä–∏
    "whitelist_symbols":              [],     #–í–∞–ª—é—Ç–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É"
}

class VirtualBinanceRSITrader:
    def __init__(self):
        self.exchange = ccxt.binance({
            'apiKey': config.API_KEYS['binance']['apiKey'],
            'secret': config.API_KEYS['binance']['secret'],
            'enableRateLimit': True,
            'adjustForTimeDifference': True,
            'options': {'defaultType': 'spot'}
        })
        self.balance = {"USDT": CONFIG["initial_balance"], "ASSET": 0.0}
        self.holding_symbol = None
        self.holding_amount = 0.0
        self.holding_price = 0.0
        self.holding_time = None
        self.asset = None
        self.last_sell_time = None
        self.signal_history = []
        self.filtered_symbols = []
        self.last_volume_filter_update = None
        self.max_profit_percent = 0.0
        self.rsi_monitoring_mode = False
        self.rsi_buy_monitoring_mode = False
        self.min_sell_monitoring_mode = False
        self.previous_rsi = None
        self.previous_rsi_buy = None
        self.monitoring_symbol = None
        self.was_oversold = False
        self.trade_history = []
        self.buy_amount_usdt = 0.0
        self.initial_buy_amount_usdt = 0.0

    def send_telegram_message(self, message):
        telegram_url = f"https://api.telegram.org/bot{config.TOKEN}/sendMessage"
        payload = {
            "chat_id": config.CHANNEL_ID,
            "text": message,
            "parse_mode": "Markdown"
        }
        try:
            response = requests.post(telegram_url, json=payload)
            if response.status_code == 200:
                print(Fore.GREEN + f"üì© –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ Telegram-–∫–∞–Ω–∞–ª Cripto Lux Value: {message}")
                return True
            else:
                print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram: HTTP {response.status_code}, {response.text}")
                return False
        except Exception as e:
            print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram: {e}")
            return False

    def send_telegram_photo(self, photo_path, caption):
        telegram_url = f"https://api.telegram.org/bot{config.TOKEN}/sendPhoto"
        try:
            with open(photo_path, 'rb') as photo:
                files = {'photo': photo}
                payload = {
                    "chat_id": config.CHANNEL_ID,
                    "caption": caption,
                    "parse_mode": "Markdown"
                }
                response = requests.post(telegram_url, data=payload, files=files)
                if response.status_code == 200:
                    print(Fore.GREEN + f"üì∏ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ Telegram-–∫–∞–Ω–∞–ª Cripto Lux Value: {photo_path}")
                    return True
                else:
                    print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ Telegram: HTTP {response.status_code}, {response.text}")
                    return False
        except Exception as e:
            print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ Telegram: {e}")
            return False

    def sync_time_with_server(self):
        try:
            server_time = self.exchange.fetch_time()
            server_time_ms = server_time
            local_time_ms = int(datetime.now(timezone.utc).timestamp() * 1000)
            time_diff_ms = local_time_ms - server_time_ms
            print(Fore.BLUE + f"üìò –†—ñ–∑–Ω–∏—Ü—è —á–∞—Å—É –º—ñ–∂ –ª–æ–∫–∞–ª—å–Ω–∏–º —ñ —Å–µ—Ä–≤–µ—Ä–Ω–∏–º —á–∞—Å–æ–º: {time_diff_ms} –º—Å")
            self.exchange.options['timeDifference'] = time_diff_ms
        except Exception as e:
            print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó —á–∞—Å—É –∑ —Å–µ—Ä–≤–µ—Ä–æ–º: {e}")

    def test_authentication(self):
        try:
            self.exchange.fetch_balance()
            print(Fore.GREEN + "‚úÖ API –∫–ª—é—á—ñ –≤–∞–ª—ñ–¥–Ω—ñ.")
            return True
        except ccxt.AuthenticationError as e:
            print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: {e}")
            return False
        except Exception as e:
            print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó: {e}")
            return False

    def get_spot_pairs(self):
        try:
            self.exchange.load_markets()
            symbols = [
                symbol for symbol, market in self.exchange.markets.items()
                if market['quote'] == 'USDT' and market['active'] and market['spot']
            ]
            return symbols
        except Exception as e:
            print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ—Ä–≥–æ–≤–∏—Ö –ø–∞—Ä: {e}")
            return []

    def is_market_active(self, symbol):
        try:
            self.exchange.load_markets()
            market = self.exchange.markets.get(symbol)
            if market is None:
                print(Fore.YELLOW + f"‚ö†Ô∏è {symbol}: –í–∞–ª—é—Ç–Ω–∞ –ø–∞—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –±—ñ—Ä–∂—ñ.")
                return False
            is_active = market.get('active', False)
            if not is_active:
                print(Fore.YELLOW + f"‚ö†Ô∏è {symbol}: –¢–æ—Ä–≥—ñ–≤–ª—è –∑–∞–∫—Ä–∏—Ç–∞ (–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞).")
            return is_active
        except Exception as e:
            print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É —Ä–∏–Ω–∫—É –¥–ª—è {symbol}: {e}")
            return False

    def update_volume_filter(self):
        print(Fore.CYAN + f"üîç \n –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞ –æ–±—Å—è–≥—É —Ç–æ—Ä–≥—ñ–≤–ª—ñ...")
        symbols = self.get_spot_pairs()
        filtered_symbols = []
        for symbol in symbols:
            try:
                if not self.is_market_active(symbol):
                    continue
                ticker = self.exchange.fetch_ticker(symbol)
                quote_volume = ticker['quoteVolume']
                if quote_volume >= CONFIG["min_volume"]:
                    filtered_symbols.append(symbol)
                    print(Fore.LIGHTYELLOW_EX + f"üü° {symbol}: –û–±—Å—è–≥ {quote_volume:.6f} USDT, –¥–æ–¥–∞–Ω–æ –¥–æ —Ñ—ñ–ª—å—Ç—Ä—É.")
                else:
                    print(Fore.YELLOW + f"‚ö†Ô∏è {symbol}: –û–±—Å—è–≥ {quote_volume:.6f} USDT < {CONFIG['min_volume']} USDT, –≤–∏–∫–ª—é—á–µ–Ω–æ.")
            except Exception as e:
                print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–±—Å—è–≥—É –¥–ª—è {symbol}: {e}")
        self.filtered_symbols = filtered_symbols
        self.last_volume_filter_update = datetime.now(KYIV_TZ)
        print(Fore.GREEN + f"‚úÖ –§—ñ–ª—å—Ç—Ä –æ–Ω–æ–≤–ª–µ–Ω–æ: {len(self.filtered_symbols)} –ø–∞—Ä —ñ–∑ –¥–æ—Å—Ç–∞—Ç–Ω—ñ–º –æ–±—Å—è–≥–æ–º.")

    def calculate_rma(self, data, period):
        rma = np.zeros(len(data))
        rma[0] = np.mean(data[:period]) if len(data) >= period else data[0]
        for i in range(1, len(data)):
            rma[i] = (rma[i-1] * (period - 1) + data[i]) / period
        return rma

    def calculate_rsi(self, closes, period=CONFIG["rsi_period"]):
        if len(closes) < period + 1:
            print(Fore.YELLOW + f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è RSI: {len(closes)} —Å–≤—ñ—á–æ–∫, –ø–æ—Ç—Ä—ñ–±–Ω–æ {period + 1}.")
            return None 
        print(Fore.CYAN + f"üîç –û—Å—Ç–∞–Ω–Ω—ñ —Ü—ñ–Ω–∏ –∑–∞–∫—Ä–∏—Ç—Ç—è –¥–ª—è RSI: {closes[-5:]}")
        
        changes = np.diff(closes)
        up = np.maximum(changes, 0)
        down = -np.minimum(changes, 0)
        
        avg_up = self.calculate_rma(up, period)
        avg_down = self.calculate_rma(down, period)

        rs = np.where(avg_down < 1e-10, np.inf, avg_up / avg_down)
        rsi = np.where(avg_down == 0, 100, np.where(avg_up == 0, 0, 100 - (100 / (1 + rs))))
        
        print(Fore.MAGENTA + f"üß† RSI —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–π: {rsi[-1]:.6f}, RS: {rs[-1]:.6f}, avg_up: {avg_up[-1]:.6f}, avg_down: {avg_down[-1]:.6f}")
        return rsi

    def pivot_low(self, data, left, right):
        pivots = np.full(len(data), False)
        for i in range(left, len(data) - right):
            is_pivot = True
            for j in range(1, left + 1):
                if data[i] >= data[i - j]:
                    is_pivot = False
                    break
            for j in range(1, right + 1):
                if data[i] >= data[i + j]:
                    is_pivot = False
                    break
            if is_pivot:
                pivots[i] = True
        return pivots

    def pivot_high(self, data, left, right):
        pivots = np.full(len(data), False)
        for i in range(left, len(data) - right):
            is_pivot = True
            for j in range(1, left + 1):
                if data[i] <= data[i - j]:
                    is_pivot = False
                    break
            for j in range(1, right + 1):
                if data[i] <= data[i + j]:
                    is_pivot = False
                    break
            if is_pivot:
                pivots[i] = True
        return pivots

    def bars_since(self, condition):
        bars = np.full(len(condition), 0, dtype=int)
        count = 0
        for i in range(len(condition) - 1, -1, -1):
            if condition[i]:
                count = 0
            else:
                count += 1
            bars[i] = count
        return bars

    def in_range(self, bars):
        return (bars >= CONFIG["range_lower"]) & (bars <= CONFIG["range_upper"])

    def value_when(self, condition, source, occurrence):
        values = np.full(len(source), np.nan)
        count = 0
        for i in range(len(condition)):
            if condition[i]:
                count += 1
                if count == occurrence + 1:
                    values[i:] = source[i]
                    break
        return values

    def detect_divergence(self, symbol, closes, lows, highs, rsi_values):
        prev_pl_idx = None
        lookback_left = CONFIG["lookback_left"]
        lookback_right = CONFIG["lookback_right"]

        pl_found = self.pivot_low(rsi_values, lookback_left, lookback_right)
        ph_found = self.pivot_high(rsi_values, lookback_left, lookback_right)

        rsi_lbr = np.roll(rsi_values, lookback_right)
        low_lbr = np.roll(lows, lookback_right)
        high_lbr = np.roll(highs, lookback_right)

        pl_indices = np.where(pl_found)[0]
        bull_cond = np.full(len(rsi_values), False)
        if len(pl_indices) >= 2:
            for idx in pl_indices[-1:]:
                prev_pl_idx = pl_indices[pl_indices < idx][-1] if len(pl_indices[pl_indices < idx]) > 0 else None
                if prev_pl_idx is not None:
                    bars = idx - prev_pl_idx
                    if CONFIG["range_lower"] <= bars <= CONFIG["range_upper"]:
                        rsi_hl = rsi_lbr[idx] > rsi_lbr[prev_pl_idx]
                        price_ll = low_lbr[idx] < low_lbr[prev_pl_idx]
                        bull_cond[idx] = rsi_hl and price_ll
                        if bull_cond[idx]:
                            print(Fore.GREEN + f"‚úÖ {symbol}: –í–∏—è–≤–ª–µ–Ω–æ Regular Bullish Divergence –Ω–∞ —Å–≤—ñ—á—Ü—ñ {idx}: RSI HL={rsi_lbr[idx]:.2f} > {rsi_lbr[prev_pl_idx]:.2f}, Price LL={low_lbr[idx]:.6f} < {low_lbr[prev_pl_idx]:.6f}")

        ph_indices = np.where(ph_found)[0]
        bear_cond = np.full(len(rsi_values), False)
        if len(ph_indices) >= 2:
            for idx in ph_indices[-1:]:
                prev_ph_idx = ph_indices[ph_indices < idx][-1] if len(ph_indices[ph_indices < idx]) > 0 else None
                if prev_ph_idx is not None:
                    bars = idx - prev_pl_idx
                    if CONFIG["range_lower"] <= bars <= CONFIG["range_upper"]:
                        rsi_lh = rsi_lbr[idx] < rsi_lbr[prev_pl_idx]
                        price_hh = high_lbr[idx] > high_lbr[prev_pl_idx]
                        bear_cond[idx] = rsi_lh and price_hh
                        if bear_cond[idx]:
                            print(Fore.LIGHTRED_EX + f"üî• {symbol}: –í–∏—è–≤–ª–µ–Ω–æ Regular Bearish Divergence –Ω–∞ —Å–≤—ñ—á—Ü—ñ {idx}: RSI LH={rsi_lbr[idx]:.2f} < {rsi_lbr[prev_pl_idx]:.2f}, Price HH={high_lbr[idx]:.6f} > {high_lbr[prev_pl_idx]:.6f}")

        return bull_cond, bear_cond

    def get_rsi_and_divergence(self, symbol, timeframe=CONFIG["timeframe"], period=CONFIG["rsi_period"], bars_count=CONFIG["rsi_bars_count"]):
        try:
            ohlcv = self.exchange.fetch_ohlcv(symbol, timeframe, limit=bars_count)
            if not ohlcv or len(ohlcv) < period + 1:
                print(Fore.YELLOW + f"‚ö†Ô∏è {symbol}: –ù–µ–º–∞—î –∞–±–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö OHLCV ({len(ohlcv) if ohlcv else 0} —Å–≤—ñ—á–æ–∫), RSI –Ω–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è.")
                return None, None, None

            timestamps = [datetime.fromtimestamp(candle[0] / 1000, tz=timezone.utc).astimezone(KYIV_TZ) for candle in ohlcv]
            closes = np.array([candle[4] for candle in ohlcv], dtype=np.float64)
            lows = np.array([candle[3] for candle in ohlcv], dtype=np.float64)
            highs = np.array([candle[2] for candle in ohlcv], dtype=np.float64)

            if np.all(closes == closes[0]) or np.any(np.isnan(closes)) or np.any(np.isinf(closes)):
                print(Fore.YELLOW + f"‚ö†Ô∏è {symbol}: –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ OHLCV, RSI –Ω–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è.")
                return None, None, None

            rsi_values = self.calculate_rsi(closes, period)
            if rsi_values is None:
                return None, None, None

            bull_cond, bear_cond = self.detect_divergence(symbol, closes, lows, highs, rsi_values)

            return rsi_values[-1], bull_cond[-1], bear_cond[-1]
        except Exception as e:
            print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è RSI –¥–ª—è {symbol}: {e}")
            return None, None, None

    def get_order_book_price(self, symbol, amount_usdt, side):
        if amount_usdt <= 0 or (side == 'BUY' and self.balance["USDT"] <= 0):
            print(Fore.RED + f"‚ùå {symbol}: –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ–π –±–∞–ª–∞–Ω—Å USDT: {self.balance['USDT']:.6f}")
            return None, 0
        try:
            order_book = self.exchange.fetch_order_book(symbol, limit=100)
            orders = order_book['asks'] if side == 'BUY' else order_book['bids']
            total_qty = 0.0
            total_cost = 0.0
            order_count = 0
            for price, qty in orders:
                order_count += 1
                if side == 'BUY':
                    qty_usdt = qty * price
                    if total_cost + qty_usdt > amount_usdt:
                        qty_usdt = amount_usdt - total_cost
                        qty = qty_usdt / price
                    total_cost += qty_usdt
                    total_qty += qty
                else:
                    qty_needed = amount_usdt / price
                    if total_qty + qty > qty_needed:
                        qty = qty_needed - total_qty
                    total_qty += qty
                    total_cost += qty * price
                if total_cost >= amount_usdt or (side == 'SELL' and total_qty >= amount_usdt / price):
                    break
            if total_qty <= 0 or order_count == 0:
                print(Fore.YELLOW + f"‚ö†Ô∏è {symbol}: –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ª—ñ–∫–≤—ñ–¥–Ω–æ—Å—Ç—ñ –≤ –∫–Ω–∏–∑—ñ –æ—Ä–¥–µ—Ä—ñ–≤.")
                return None, 0
            return total_cost / total_qty, order_count
        except Exception as e:
            print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–Ω–∏–≥–∏ –æ—Ä–¥–µ—Ä—ñ–≤ –¥–ª—è {symbol}: {e}")
            return None, 0

    def calculate_potential_profit(self, symbol, current_price, order_count):
        if not current_price or current_price <= 0 or self.holding_amount <= 0:
            print(Fore.YELLOW + f"‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –ø—Ä–∏–±—É—Ç–∫—É: —Ü—ñ–Ω–∞={current_price}, –∫—ñ–ª—å–∫—ñ—Å—Ç—å={self.holding_amount}")
            return 0.0
        qty = self.holding_amount
        sell_commission_qty = qty * CONFIG["commission_rate"] * order_count
        sell_amount_usdt = (qty - sell_commission_qty) * current_price
        buy_amount_usdt = self.buy_amount_usdt
        profit = sell_amount_usdt - buy_amount_usdt 
        return profit

    def calculate_profit_percent(self, current_price, order_count):
        if not current_price or current_price <= 0 or self.holding_amount <= 0:
            return 0.0
        qty = self.holding_amount
        sell_commission_qty = qty * CONFIG["commission_rate"] * order_count
        sell_amount_usdt = (qty - sell_commission_qty) * current_price
        buy_amount_usdt = self.buy_amount_usdt
        if buy_amount_usdt == 0:
            return 0.0
        profit_percent = (sell_amount_usdt - buy_amount_usdt) / buy_amount_usdt * 100
        return profit_percent

    def plot_chart(self, symbol, signal_type, signal_price, signal_time, profit=None, bar_count=None, buy_time=None):
        filename = None
        
        timeframe = CONFIG["timeframe"]

        print(Fore.BLUE + f"üìò –ü–æ—á–∏–Ω–∞—î–º–æ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –≥—Ä–∞—Ñ—ñ–∫–∞ –¥–ª—è {symbol}, —Å–∏–≥–Ω–∞–ª: {signal_type}, —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —É–≥–æ–¥–∏: {(signal_time - buy_time).total_seconds() if buy_time else 0:.2f} —Å–µ–∫—É–Ω–¥")

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∞–π–º—Ñ—Ä–µ–π–º –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ —É–≥–æ–¥–∏ –í–∏—è–≤–ª–µ–Ω–æ Regular Bullish Divergence
        if signal_type == 'SELL' and buy_time:
            if buy_time.tzinfo is None:
                buy_time = buy_time.astimezone(KYIV_TZ)
            duration_seconds = (signal_time - buy_time).total_seconds()
            if duration_seconds < 60:  # –ú–µ–Ω—à–µ 1 —Ö–≤–∏–ª–∏–Ω–∏
                timeframe = "1s"
                print(Fore.BLUE + f"üìò –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 1-—Å–µ–∫—É–Ω–¥–Ω—ñ —Å–≤—ñ—á–∫–∏ –¥–ª—è —É–≥–æ–¥–∏ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é {duration_seconds:.2f} —Å–µ–∫—É–Ω–¥.")
            elif 60 <= duration_seconds < 600:  #–∑ 1 –¥–æ 10 —Ö–≤–∏–ª–∏–Ω
                timeframe = "1m"
                print(Fore.BLUE + f"üìò –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 1-—Ö–≤–∏–ª–∏–Ω–Ω—ñ —Å–≤—ñ—á–∫–∏ –¥–ª—è —É–≥–æ–¥–∏ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é {duration_seconds/60:.2f} —Ö–≤–∏–ª–∏–Ω.")
            else:  # 10 —Ö–≤–∏–ª–∏–Ω —ñ –±—ñ–ª—å—à–µ
                print(Fore.BLUE + f"üìò –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 1-—Ö–≤–∏–ª–∏–Ω–Ω—ñ —Å–≤—ñ—á–∫–∏ –¥–ª—è —É–≥–æ–¥–∏ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é {duration_seconds/60:.2f} —Ö–≤–∏–ª–∏–Ω.")
            
            # –†–æ–∑—à–∏—Ä—é—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω –∑–∞–ø–∏—Ç—É –¥–∞–Ω–∏—Ö
            since = int(buy_time.timestamp() * 1000) 
            print(Fore.BLUE + f"üìò –ó–∞–ø–∏—Ç OHLCV –∑ since={since} –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º—É {timeframe}")
            ohlcv = self.exchange.fetch_ohlcv(symbol, timeframe, since=since, limit=100)
            if not ohlcv or len(ohlcv) < CONFIG["candles"]:
                print(Fore.YELLOW + f"‚ö†Ô∏è {symbol}: –ù–µ–º–∞—î –∞–±–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö OHLCV ({len(ohlcv) if ohlcv else 0} —Å–≤—ñ—á–æ–∫) –¥–ª—è —Ç–∞–π–º—Ñ—Ä–µ–π–º—É {timeframe}. –°–ø—Ä–æ–±—É—î–º–æ 1m.")
                timeframe = "1m"
                ohlcv = self.exchange.fetch_ohlcv(symbol, timeframe, since=since, limit=100)
                if not ohlcv or len(ohlcv) < CONFIG["candles"]:
                    print(Fore.YELLOW + f"‚ö†Ô∏è {symbol}: –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö OHLCV –Ω–∞–≤—ñ—Ç—å –¥–ª—è 1m. –ì–µ–Ω–µ—Ä—É—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫.")
                    # –°—Ç–≤–æ—Ä—é—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π DataFrame –∑ –æ–¥–Ω—ñ—î—é —Å–≤—ñ—á–∫–æ—é
                    ticker = self.exchange.fetch_ticker(symbol)
                    current_price = ticker['last']
                    timestamp = int(signal_time.timestamp() * 1000)
                    ohlcv = [[timestamp, signal_price, signal_price, signal_price, signal_price, 0]]
        else:
            print(Fore.BLUE + f"üìò –ó–∞–ø–∏—Ç OHLCV –¥–ª—è —Å–∏–≥–Ω–∞–ª—É –∫—É–ø—ñ–≤–ª—ñ, —Ç–∞–π–º—Ñ—Ä–µ–π–º {timeframe}")
            ohlcv = self.exchange.fetch_ohlcv(symbol, timeframe, limit=CONFIG["rsi_bars_count"])

        if not ohlcv or len(ohlcv) == 0:
            print(Fore.RED + f"‚ùå {symbol}: –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö OHLCV –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ.")
            return

        print(Fore.BLUE + f"üìò –û—Ç—Ä–∏–º–∞–Ω–æ {len(ohlcv)} —Å–≤—ñ—á–æ–∫. –ü–µ—Ä—à–∏–π —Ç–∞–π–º—Å—Ç–µ–º–ø: {ohlcv[0][0]}, –û—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∞–π–º—Å—Ç–µ–º–ø: {ohlcv[-1][0]}")

        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö OHLCV
        if df.empty or df['close'].dropna().empty or df['high'].dropna().empty or df['low'].dropna().empty:
            print(Fore.RED + f"‚ùå {symbol}: DataFrame –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ –º–∞—î –≤–∞–ª—ñ–¥–Ω–∏—Ö OHLC-–¥–∞–Ω–∏—Ö. –ì–µ–Ω–µ—Ä—É—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫.")
            timestamp = int(signal_time.timestamp() * 1000)
            df = pd.DataFrame([[timestamp, signal_price, signal_price, signal_price, signal_price, 0]],
                              columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è OHLC –æ–¥–Ω–∞–∫–æ–≤—ñ
        if (df['open'] == df['high']).all() and (df['high'] == df['low']).all() and (df['low'] == df['close']).all():
            print(Fore.YELLOW + f"‚ö†Ô∏è {symbol}: –£—Å—ñ –∑–Ω–∞—á–µ–Ω–Ω—è OHLC –æ–¥–Ω–∞–∫–æ–≤—ñ. –î–æ–¥–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫–∏–π —Ä–æ–∑–∫–∏–¥ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –≥—Ä–∞—Ñ—ñ–∫–∞.")
            df['high'] = df['high'] + 0.000001
            df['low'] = df['low'] - 0.000001

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–∞–π–º—Å—Ç–µ–º–ø–∏
        if df['timestamp'].iloc[0] < 1000000000000:
            print(Fore.YELLOW + f"‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ —Ç–∞–π–º—Å—Ç–µ–º–ø–∏, –≥–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ signal_time.")
            signal_time_ms = int(signal_time.timestamp() * 1000)
            timeframe_ms = 1000 if timeframe == "1s" else 60 * 1000
            timestamps = [signal_time_ms - (len(df) - 1 - i) * timeframe_ms for i in range(len(df))]
            df['timestamp'] = timestamps

        df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms', utc=True).dt.tz_convert('Europe/Kiev')
        df.set_index('timestamp', inplace=True)

        closes = df['close'].values
        if len(ohlcv) >= CONFIG["rsi_period"] + 1:
            rsi_values = self.calculate_rsi(closes, CONFIG["rsi_period"])
            if rsi_values is not None:
                expected_rsi_length = len(closes) - 1
                if len(rsi_values) == expected_rsi_length:
                    df = df.iloc[1:]
                    df['rsi'] = rsi_values
                else:
                    print(Fore.YELLOW + f"‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞ RSI ({len(rsi_values)}), –æ—á—ñ–∫—É–≤–∞–ª–æ—Å—è {expected_rsi_length}. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ RSI.")
                    df['rsi'] = 0.0
            else:
                df['rsi'] = 0.0
        else:
            print(Fore.YELLOW + f"‚ö†Ô∏è {symbol}: –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Å–≤—ñ—á–æ–∫ ({len(ohlcv)}) –¥–ª—è RSI, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ RSI.")
            df['rsi'] = 0.0

        support_resistance = []

        recent_high = df['high'][-20:].max() if len(df) >= 20 else df['high'].max() if not df['high'].empty else signal_price
        recent_low = df['low'][-20:].min() if len(df) >= 20 else df['low'].min() if not df['low'].empty else signal_price

        support_resistance = [
            mpf.make_addplot([recent_high] * len(df), color='red', linestyle='--'),
            mpf.make_addplot([recent_low] * len(df), color='green', linestyle='--')
        ]

        apd = []
        if signal_type == 'BUY':
            signal_idx = df.index[-1] if signal_time > df.index[-1] else signal_time
            apd.append(mpf.make_addplot([signal_price if idx == signal_idx else np.nan for idx in df.index],
                                        type='scatter', markersize=100, marker='^', color='green'))
        elif signal_type == 'SELL' and buy_time:
            buy_idx = df.index[0] if buy_time < df.index[0] else buy_time
            sell_idx = df.index[-1] if signal_time > df.index[-1] else signal_time
            if buy_idx in df.index and sell_idx in df.index and buy_idx < sell_idx:
                apd.append(mpf.make_addplot([self.holding_price if idx == buy_idx else np.nan for idx in df.index],
                                            type='scatter', markersize=100, marker='^', color='green'))
                apd.append(mpf.make_addplot([signal_price if idx == sell_idx else np.nan for idx in df.index],
                                            type='scatter', markersize=100, marker='v', color='red'))
                line_data = pd.Series(index=df.index, dtype=float)
                line_data[buy_idx:sell_idx] = np.linspace(self.holding_price, signal_price, len(line_data[buy_idx:sell_idx]))
                apd.append(mpf.make_addplot(line_data, color='blue', linestyle='--'))
            else:
                print(Fore.YELLOW + f"‚ö†Ô∏è –ù–µ–º–æ–∂–ª–∏–≤–æ –ø–æ–±—É–¥—É–≤–∞—Ç–∏ –ª—ñ–Ω—ñ—é –∫—É–ø—ñ–≤–ª—ñ-–ø—Ä–æ–¥–∞–∂—É: buy_idx={buy_idx}, sell_idx={sell_idx}, df.index[0]={df.index[0]}, df.index[-1]={df.index[-1]}")

        rsi_plot = mpf.make_addplot(df['rsi'], panel=1, color='purple', ylabel='RSI')
        rsi_overbought = mpf.make_addplot([CONFIG["rsi_overbought"]] * len(df), panel=1, color='red', linestyle='--')
        rsi_oversold = mpf.make_addplot([CONFIG["rsi_oversold"]] * len(df), panel=1, color='green', linestyle='--')

        total_volume = df['volume'].sum()
        bar_count = len(df) if bar_count is None else bar_count

        text = f"–ú–æ–Ω–µ—Ç–∞: {symbol}\n"
        text += f"–°–∏–≥–Ω–∞–ª: {signal_type}\n"
        text += f"–¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}\n"
        if signal_type == 'SELL' and buy_time:
            profit_percent = ((signal_price - self.holding_price) / self.holding_price) * 100
            text += f"–¶—ñ–Ω–∞ –∫—É–ø—ñ–≤–ª—ñ: {self.holding_price:.6f} USDT\n"
            text += f"–¶—ñ–Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {signal_price:.6f} USDT\n"
            text += f"–ü—Ä–æ—Ñ—ñ—Ç: {profit:.6f} USDT ({profit_percent:.2f}%)\n"
        else:
            text += f"–¶—ñ–Ω–∞: {signal_price:.6f} USDT\n"
        text += f"–û–±—Å—è–≥: {total_volume:.6f}\n"
        text += f"–ë–∞—Ä–∏: {bar_count}\n"
        text += f"–ü—ñ–¥—Ç—Ä–∏–º–∫–∞: {recent_low:.6f}\n"
        text += f"–û–ø—ñ—Ä: {recent_high:.6f}\n"
        text += f"–ß–∞—Å (–ö–∏—ó–≤): {signal_time.astimezone(KYIV_TZ).strftime('%Y-%m-%d %H:%M:%S')}"

        custom_style = mpf.make_mpf_style(
            base_mpf_style='nightclouds',
            rc={'axes.labelcolor': 'white', 'xtick.color': 'white', 'ytick.color': 'white'},
            marketcolors=mpf.make_marketcolors(
                up='#00FF00',
                down='#FF0000',
                edge={'up': '#00FF00', 'down': '#FF0000'},
                wick={'up': 'white', 'down': 'white'},
                volume='gray'
            )
        )

        try:
            if signal_type == 'BUY':
                fig, axes = mpf.plot(df, type='candle', style=custom_style,
                                     addplot=apd + [rsi_plot, rsi_overbought, rsi_oversold] + support_resistance,
                                     volume=False, figsize=(12, 8), returnfig=True)
            else: 
                fig, axes = mpf.plot(df, type='candle', style=custom_style,
                                     addplot=apd + support_resistance,
                                     volume=False, figsize=(12, 8), returnfig=True)

        except Exception as e:
            print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–±—É–¥–æ–≤–∏ –≥—Ä–∞—Ñ—ñ–∫–∞ –¥–ª—è {symbol}: {e}")
            print(Fore.YELLOW + f"‚ö†Ô∏è –°–ø—Ä–æ–±—É—î–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ —ñ–∑ –æ–¥–Ω—ñ—î—é —Å–≤—ñ—á–∫–æ—é.")
            # –°—Ç–≤–æ—Ä—é—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π DataFrame
            timestamp = int(signal_time.timestamp() * 1000)
            df = pd.DataFrame([[timestamp, signal_price, signal_price + 0.000001, signal_price - 0.000001, signal_price, 0]],
                              columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms', utc=True).dt.tz_convert('Europe/Kiev')
            df.set_index('timestamp', inplace=True)
            df['rsi'] = np.nan
            apd = []
            if signal_type == 'BUY':
                apd.append(mpf.make_addplot([signal_price], type='scatter', markersize=100, marker='^', color='green'))
            elif signal_type == 'SELL' and buy_time:
                apd.append(mpf.make_addplot([self.holding_price], type='scatter', markersize=100, marker='^', color='green'))
                apd.append(mpf.make_addplot([signal_price], type='scatter', markersize=100, marker='v', color='red'))
            try:
                fig, axes = mpf.plot(df, type='candle', style=custom_style,
                                     addplot=apd + [rsi_plot, rsi_overbought, rsi_oversold],
                                     volume=False, figsize=(12, 8), returnfig=True)
            except Exception as e:
                print(Fore.RED + f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞–≤—ñ—Ç—å –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ –¥–ª—è {symbol}: {e}")
                plt.close('all')
                return

        axes[0].tick_params(axis='x', rotation=45)
        axes[0].text(0.02, 0.98, text, transform=axes[0].transAxes, fontsize=10,
                     verticalalignment='top', bbox=dict(facecolor='black', alpha=0.8, edgecolor='white'))

        base_dir = CONFIG["signals_dir"]
        date_dir = datetime.now(KYIV_TZ).strftime('%Y_%m_%d')
        symbol_dir = symbol.replace('/', '_')
        chart_dir = os.path.join(base_dir, date_dir, symbol_dir)
        try:
            if not os.path.exists(base_dir):
                print(Fore.YELLOW + f"‚ö†Ô∏è –ë–∞–∑–æ–≤–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è {base_dir} –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ —ó—ó.")
            if not os.access(base_dir, os.W_OK):
                raise PermissionError(f"–ù–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å —É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é {base_dir}")
            os.makedirs(chart_dir, exist_ok=True)
            filename = os.path.join(chart_dir, f"{symbol_dir}_{signal_type.lower()}_{datetime.now(KYIV_TZ).strftime('%Hh_%Mm_%Ss')}.png")
            plt.savefig(filename)
            print(Fore.GREEN + f"‚úÖ –ì—Ä–∞—Ñ—ñ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —è–∫ {filename} –¥–ª—è {symbol} —ñ–∑ —Å–∏–≥–Ω–∞–ª–æ–º {signal_type}.")
        except Exception as e:
            print(Fore.RED + f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ {filename if 'filename' in locals() else 'None'}: {e}")
            plt.close(fig)
            return

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ Telegram
        telegram_caption = (
            f"üìä *–ì—Ä–∞—Ñ—ñ–∫ —Å–∏–≥–Ω–∞–ª—É {signal_type} –¥–ª—è {symbol}*\n"
            f"–¢–∞–π–º—Ñ—Ä–µ–π–º: {timeframe}\n"
            f"–ß–∞—Å (–ö–∏—ó–≤): {signal_time.astimezone(KYIV_TZ).strftime('%Y-%m-%d %H:%M:%S')}"
        )
        if signal_type == 'SELL' and buy_time:
            profit_percent = ((signal_price - self.holding_price) / self.holding_price) * 100
            telegram_caption += f"\n–ü—Ä–æ—Ñ—ñ—Ç: {profit:.6f} USDT ({profit_percent:.2f}%)"
        if not self.send_telegram_photo(filename, telegram_caption):
            print(Fore.RED + f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ Telegram –¥–ª—è {symbol}, —Å–∏–≥–Ω–∞–ª {signal_type}.")

        plt.close(fig)
        plt.close('all')

    def execute_buy(self, symbol, price, order_count):
        if not self.is_market_active(symbol):
            print(Fore.YELLOW + f"‚ö†Ô∏è {symbol}: –†–∏–Ω–æ–∫ –∑–∞–∫—Ä–∏—Ç–∏–π, –∫—É–ø—ñ–≤–ª—è –Ω–µ–º–æ–∂–ª–∏–≤–∞.")
            return

        amount_usdt = self.balance["USDT"]
        if amount_usdt <= 0:
            print(Fore.RED + f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ–π –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å USDT: {amount_usdt:.6f}")
            return

        qty = amount_usdt / price
        commission_qty_per_order = qty * CONFIG["commission_rate"]
        total_commission_qty = commission_qty_per_order * order_count
        qty_net = qty - total_commission_qty

        buy_amount_usdt = qty_net * price

        self.balance["USDT"] -= amount_usdt
        self.balance["ASSET"] = qty_net
        self.holding_symbol = symbol
        self.holding_amount = qty_net
        self.holding_price = price
        self.holding_time = datetime.now(KYIV_TZ)
        self.asset = symbol.split('/')[0]
        self.buy_amount_usdt = buy_amount_usdt
        self.initial_buy_amount_usdt = buy_amount_usdt
        self.max_profit_percent = 0.0
        self.rsi_monitoring_mode = False
        self.rsi_buy_monitoring_mode = False
        self.previous_rsi = None
        self.previous_rsi_buy = None
        self.monitoring_symbol = None
        self.was_oversold = False

        print(
            Fore.GREEN + f"‚úÖ \n[–ö–£–ü–Ü–í–õ–Ø {symbol}] {self.holding_time}\n" +
            Fore.GREEN + f"–ö—É–ø–ª–µ–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å: {amount_usdt:.6f} USDT\n" +
            Fore.GREEN + f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {qty_net:.6f} {self.asset} –∑–∞ {price:.6f} USDT\n" +
            Fore.YELLOW + f"–ö–æ–º—ñ—Å—ñ—è: {total_commission_qty:.6f} {self.asset} (–∑–∞ {order_count} –æ—Ä–¥–µ—Ä(—ñ–≤))\n" +
            Fore.GREEN + f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ä–¥–µ—Ä—ñ–≤: {order_count}\n" +
            Fore.GREEN + f"–ë–∞–ª–∞–Ω—Å: {self.balance['USDT']:.6f} USDT, {self.balance['ASSET']:.6f} {self.asset}\n"
        )

        trade_record = {
            "type": "BUY",
            "symbol": symbol,
            "price": price,
            "quantity": qty_net,
            "amount_usdt": amount_usdt,
            "commission": total_commission_qty,
            "timestamp": self.holding_time,
            "balance_usdt": self.balance["USDT"],
            "balance_asset": self.balance["ASSET"]
        }
        self.trade_history.append(trade_record)

        self.plot_chart(symbol, 'BUY', price, self.holding_time)

        telegram_message = (
            f"üìà *–°–ò–ì–ù–ê–õ –ö–£–ü–Ü–í–õ–Ü*\n"
            f"–ú–æ–Ω–µ—Ç–∞: {symbol}\n"
            f"–¶—ñ–Ω–∞: {price:.6f} USDT\n"
            f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {qty_net:.6f} {self.asset}\n"
            f"–°—É–º–∞: {amount_usdt:.6f} USDT\n"
            f"–ö–æ–º—ñ—Å—ñ—è: {total_commission_qty:.6f} {self.asset}\n"
            f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ä–¥–µ—Ä—ñ–≤: {order_count}\n"
            f"–ë–∞–ª–∞–Ω—Å: {self.balance['USDT']:.6f} USDT, {self.balance['ASSET']:.6f} {self.asset}\n"
            f"–ß–∞—Å (–ö–∏—ó–≤): {self.holding_time.strftime('%m-%d %H:%M:%S')}"
        )
        self.send_telegram_message(telegram_message)

    def execute_sell(self, symbol, price, order_count):
        if not self.is_market_active(symbol):
            print(Fore.YELLOW + f"‚ö†Ô∏è {symbol}: –†–∏–Ω–æ–∫ –∑–∞–∫—Ä–∏—Ç–∏–π, –ø—Ä–æ–¥–∞–∂ –Ω–µ–º–æ–∂–ª–∏–≤–∏–π.")
            return

        qty = self.holding_amount
        if qty <= 0 or order_count <= 0:
            print(Fore.RED + f"‚ùå –ù–µ–º–∞—î –∞–∫—Ç–∏–≤—ñ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É: {qty:.6f} {self.asset}, –∞–±–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ä–¥–µ—Ä—ñ–≤: {order_count}")
            self.reset_position()
            return

        commission_qty_per_order = qty * CONFIG["commission_rate"]
        total_commission_qty = commission_qty_per_order * order_count
        qty_net = qty - total_commission_qty
        amount_usdt = qty_net * price
        profit = self.calculate_potential_profit(symbol, price, order_count)
        holding_duration = (datetime.now(KYIV_TZ) - self.holding_time).total_seconds() / 60.0
        bar_count = int(holding_duration) if holding_duration >= 1 else 1

        total_seconds = int(holding_duration * 60)
        hours = total_seconds // 3600
        minutes = (total_seconds % 3600) // 60
        seconds = total_seconds % 60
        duration_str = ""
        if hours > 0:
            duration_str += f"{hours} –≥–æ–¥ "
        if minutes > 0 or hours > 0:
            duration_str += f"{minutes} —Ö–≤ "
        duration_str += f"{seconds} —Å–µ–∫"

        self.balance["USDT"] += amount_usdt
        self.balance["ASSET"] -= qty
        if self.balance["ASSET"] < 0:
            self.balance["ASSET"] = 0.0

        profit_color = Fore.LIGHTGREEN_EX if profit > 0 else Fore.LIGHTRED_EX
        print(
            Fore.LIGHTRED_EX + f"üî• \n[–ü–†–û–î–ê–ñ {symbol}] {datetime.now(KYIV_TZ)}\n" +
            Fore.LIGHTRED_EX + f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {qty_net:.6f} {self.asset} –∑–∞ {price:.6f} USDT\n" +
            Fore.YELLOW + f"–ö–æ–º—ñ—Å—ñ—è: {total_commission_qty:.6f} {self.asset} (–∑–∞ {order_count} –æ—Ä–¥–µ—Ä(—ñ–≤))\n" +
            Fore.LIGHTRED_EX + f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ä–¥–µ—Ä—ñ–≤: {order_count}\n" +
            Fore.BLUE + f"–£—Ç—Ä–∏–º—É–≤–∞–Ω–æ: {duration_str}\n" +
            profit_color + f"–ß–∏—Å—Ç–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: {profit:.6f} USDT\n" +
            Fore.LIGHTRED_EX + f"–ë–∞–ª–∞–Ω—Å: {self.balance['USDT']:.6f} USDT, {self.balance['ASSET']:.6f} {self.asset}\n"
        )

        trade_record = {
            "type": "SELL",
            "symbol": symbol,
            "price": price,
            "quantity": qty_net,
            "amount_usdt": amount_usdt,
            "profit": profit,
            "timestamp": datetime.now(KYIV_TZ),
            "balance_usdt": self.balance["USDT"],
            "balance_asset": self.balance["ASSET"]
        }
        self.trade_history.append(trade_record)

        total_profit = self.balance["USDT"] - CONFIG['initial_balance']
        profit_percent = (total_profit / CONFIG["initial_balance"]) * 100
        total_profit_color = Fore.LIGHTGREEN_EX if total_profit > 0 else Fore.LIGHTRED_EX
        print(total_profit_color + f"üíπ –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: {total_profit:.6f} USDT ({profit_percent:.2f}%)")

        today = datetime.now(KYIV_TZ).date()
        trades_today = sum(1 for trade in self.trade_history if trade["timestamp"].date() == today and trade["type"] == "SELL")
        print(Fore.BLUE + f"üìò –ö—ñ–ª—å–∫—ñ—Å—Ç—å —É–≥–æ–¥ –∑–∞ –¥–µ–Ω—å ({today}): {trades_today}")

        # –ì–µ–Ω–µ—Ä—É—î–º–æ –≥—Ä–∞—Ñ—ñ–∫ –Ω–∞–≤—ñ—Ç—å –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —É–≥–æ–¥ 
        try:
            self.plot_chart(symbol, 'SELL', price, datetime.now(KYIV_TZ), profit=profit, bar_count=bar_count, buy_time=self.holding_time)
        except Exception as e:
            print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥—Ä–∞—Ñ—ñ–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂—É {symbol}: {e}")

        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
        telegram_message = (
            f"üìâ *–°–ò–ì–ù–ê–õ –ü–†–û–î–ê–ñ–£*\n"
            f"–ú–æ–Ω–µ—Ç–∞: {symbol}\n"
            f"–¶—ñ–Ω–∞ –∫—É–ø—ñ–≤–ª—ñ: {self.holding_price:.6f} USDT\n"
            f"–¶—ñ–Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {price:.6f} USDT\n"
            f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {qty_net:.6f} {self.asset}\n"
            f"–ö–æ–º—ñ—Å—ñ—è: {total_commission_qty:.6f} {self.asset}\n"
            f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ—Ä–¥–µ—Ä—ñ–≤: {order_count}\n"
            f"–ü—Ä–æ—Ñ—ñ—Ç: {profit:.6f} USDT\n"
            f"–£—Ç—Ä–∏–º—É–≤–∞–Ω–æ: {duration_str}\n"
            f"–ë–∞–ª–∞–Ω—Å: {self.balance['USDT']:.6f} USDT, {self.balance['ASSET']:.6f} {self.asset}\n"
            f"–ß–∞—Å (–ö–∏—ó–≤): {datetime.now(KYIV_TZ).strftime('%m-%d %H:%M:%S')}"
        )
        self.send_telegram_message(telegram_message)

        self.reset_position()

    def reset_position(self):
        self.holding_symbol = None
        self.holding_amount = 0.0
        self.holding_price = 0.0
        self.holding_time = None
        self.asset = None
        self.buy_amount_usdt = 0.0
        self.initial_buy_amount_usdt = 0.0
        self.last_sell_time = datetime.now(KYIV_TZ)
        self.max_profit_percent = 0.0
        self.rsi_monitoring_mode = False
        self.rsi_buy_monitoring_mode = False
        self.min_sell_monitoring_mode = False
        self.previous_rsi = None
        self.previous_rsi_buy = None
        self.monitoring_symbol = None
        self.was_oversold = False

    def run(self):
        self.sync_time_with_server()
        if not self.test_authentication():
            print(Fore.RED + "‚ùå –ó—É–ø–∏–Ω–∫–∞ —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó.")
            return

        print(Fore.WHITE + "üí¨ –ó–∞–ø—É—Å–∫ –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ RSI —Ç—Ä–µ–π–¥–µ—Ä–∞ Binance...")
        print(Fore.WHITE + f"üí¨ –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –≤—ñ—Ä—Ç—É–∞–ª—å–Ω–∏–π –±–∞–ª–∞–Ω—Å: {self.balance['USDT']:.6f} USDT")

        if not CONFIG["whitelist_symbols"]:
            self.update_volume_filter()
        else: 
            self.filtered_symbols = CONFIG["whitelist_symbols"]

        while True:
            if not CONFIG["whitelist_symbols"]:
                if self.last_volume_filter_update is None or \
                    (datetime.now(KYIV_TZ) - self.last_volume_filter_update).total_seconds() >= CONFIG["volume_filter_update_interval"]:
                    self.update_volume_filter()
            else:
                self.filtered_symbols = CONFIG["whitelist_symbols"]

            if not self.holding_symbol or self.holding_amount <= 0:
                self.holding_symbol = None
                if self.last_sell_time:
                    time_since_sell = (datetime.now(KYIV_TZ) - self.last_sell_time).total_seconds()
                    if time_since_sell < CONFIG["post_sell_delay"]:
                        print(Fore.YELLOW + f"‚ö†Ô∏è –ß–µ–∫–∞—î–º–æ {CONFIG['post_sell_delay'] - time_since_sell:.2f} —Å–µ–∫—É–Ω–¥ –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø—Ä–æ–¥–∞–∂—É.")
                        time.sleep(CONFIG["post_sell_delay"] - time_since_sell)
                        continue

                if not self.filtered_symbols:
                    print(Fore.YELLOW + f"‚ö†Ô∏è –ù–µ–º–∞—î –ø–∞—Ä —ñ–∑ –¥–æ—Å—Ç–∞—Ç–Ω—ñ–º –æ–±—Å—è–≥–æ–º –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä–∞.")
                    time.sleep(CONFIG["check_interval"])
                    continue

                if self.rsi_buy_monitoring_mode and self.monitoring_symbol:
                    symbols_to_analyze = [self.monitoring_symbol]
                    print(Fore.CYAN + f"üîç \n –ú–æ–Ω—ñ—Ç–æ—Ä–∏–º–æ –ª–∏—à–µ {self.monitoring_symbol}...")
                else:
                    symbols_to_analyze = self.filtered_symbols
                    print(Fore.CYAN + f"üîç \n –ê–Ω–∞–ª—ñ–∑ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤ ({len(self.filtered_symbols)} –ø–∞—Ä)...")

                for symbol in symbols_to_analyze:
                    if symbol in CONFIG["blacklist_symbols"]:
                        print(Fore.YELLOW + f"‚ö†Ô∏è {symbol}: –ü—Ä–æ–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ —á–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫.")
                        continue

                    if not self.is_market_active(symbol):
                        continue

                    try:
                        ticker = self.exchange.fetch_ticker(symbol)
                        quote_volume = ticker['quoteVolume']
                        price, order_count = self.get_order_book_price(symbol, self.balance["USDT"], 'BUY')
                        current_price = price if price else ticker['last']
                        rsi, bull_divergence, bear_divergence = self.get_rsi_and_divergence(symbol)

                        if rsi is not None:
                            print(
                                Fore.MAGENTA + f"üß† {symbol}: RSI={rsi:.6f}, " +
                                Fore.CYAN + f"–¶—ñ–Ω–∞={current_price:.6f} USDT, " +
                                Fore.LIGHTYELLOW_EX + f"–û–±—Å—è–≥={quote_volume:.6f} USDT"
                            )
                        else:
                            print(Fore.YELLOW + f"‚ö†Ô∏è {symbol}: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ RSI, " +
                                  Fore.LIGHTYELLOW_EX + f"–û–±—Å—è–≥={quote_volume:.6f} USDT")
                            continue

                        if rsi <= CONFIG["rsi_low_threshold"]:
                            self.was_oversold = True
                            if not self.rsi_buy_monitoring_mode:
                                self.rsi_buy_monitoring_mode = True
                                self.monitoring_symbol = symbol
                                print(Fore.MAGENTA + f"üß† RSI –¥–ª—è {symbol} –¥–æ—Å—è–≥ {rsi:.6f}, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ —Ä–µ–∂–∏–º –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∫—É–ø—ñ–≤–ª—ñ –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É.")
                                break

                        if self.rsi_buy_monitoring_mode and self.monitoring_symbol == symbol and self.was_oversold:
                            if rsi <= CONFIG["rsi_buy_exit_threshold"]:
                                if self.previous_rsi_buy is not None and rsi > self.previous_rsi_buy:
                                    print(Fore.GREEN + f"‚úÖ [–°–ò–ì–ù–ê–õ –ö–£–ü–Ü–í–õ–Ü] RSI –∑—Ä—ñ—Å –∑ {self.previous_rsi_buy:.6f} –¥–æ {rsi:.6f} –ø—ñ—Å–ª—è –∑–æ–Ω–∏ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–æ—Å—Ç—ñ.")
                                    price, order_count = self.get_order_book_price(symbol, self.balance["USDT"], 'BUY')
                                    if price and price > 0 and order_count > 0:
                                        self.execute_buy(symbol, price, order_count)
                                        break
                                else:
                                    print(
                                        Fore.CYAN + f"üîç \n[–ú–û–ù–Ü–¢–û–†–ò–ù–ì RSI –ø—ñ—Å–ª—è –∑–æ–Ω–∏ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–æ—Å—Ç—ñ {symbol}] {datetime.now(KYIV_TZ)}\n" +
                                        Fore.MAGENTA + f"RSI: {rsi:.6f} (–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π RSI: {self.previous_rsi_buy if self.previous_rsi_buy is not None else 'N/A'})\n" +
                                        Fore.CYAN + f"–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {current_price:.6f} USDT\n" +
                                        Fore.LIGHTYELLOW_EX + f"–û–±—Å—è–≥: {quote_volume:.6f} USDT\n"
                                    )
                            else:
                                self.rsi_buy_monitoring_mode = False
                                self.monitoring_symbol = None
                                self.previous_rsi_buy = None
                                self.was_oversold = False
                                print(Fore.YELLOW + f"‚ö†Ô∏è RSI –¥–ª—è {symbol} –¥–æ—Å—è–≥ {rsi:.6f}, —â–æ –≤–∏—â–µ {CONFIG['rsi_buy_exit_threshold']}, —Ä–µ–∂–∏–º –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∫—É–ø—ñ–≤–ª—ñ –≤–∏–º–∫–Ω–µ–Ω–æ.")

                        if bull_divergence:
                            print(Fore.GREEN + f"‚úÖ [–°–ò–ì–ù–ê–õ –ö–£–ü–Ü–í–õ–Ü] –í–∏—è–≤–ª–µ–Ω–æ Regular Bullish Divergence –¥–ª—è {symbol}.")
                            price, order_count = self.get_order_book_price(symbol, self.balance["USDT"], 'BUY')
                            if price and price > 0 and order_count > 0:
                                self.execute_buy(symbol, price, order_count)
                                break

                        if self.rsi_buy_monitoring_mode and self.monitoring_symbol == symbol:
                            self.previous_rsi_buy = rsi

                    except Exception as e:
                        print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ {symbol}: {e}")

                time.sleep(CONFIG["monitor_interval"])

            else:
                if self.holding_symbol and self.holding_amount > 0:
                    if not self.is_market_active(self.holding_symbol):
                        print(Fore.YELLOW + f"‚ö†Ô∏è {self.holding_symbol}: –¢–æ—Ä–≥—ñ–≤–ª—è –∑–∞–∫—Ä–∏—Ç–∞. –ü—Ä–æ–¥–∞—î–º–æ –ø–æ–∑–∏—Ü—ñ—é.")
                        price, order_count = self.get_order_book_price(self.holding_symbol, self.holding_amount * self.holding_price, 'SELL')
                        if price and price > 0 and order_count > 0:
                            self.execute_sell(self.holding_symbol, price, order_count)
                        continue

                    try:
                        rsi, bull_divergence, bear_divergence = self.get_rsi_and_divergence(self.holding_symbol)
                        if rsi is None:
                            print(Fore.YELLOW + f"‚ö†Ô∏è {self.holding_symbol}: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ RSI, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥.")
                            time.sleep(CONFIG["monitor_interval"])
                            continue

                        ticker = self.exchange.fetch_ticker(self.holding_symbol)
                        last_price = ticker['last']
                        price, order_count = self.get_order_book_price(self.holding_symbol, self.holding_amount * self.holding_price, 'SELL')
                        price = min(price, last_price) if price and last_price else (price or last_price)

                        if price and price > 0 and order_count > 0:
                            potential_profit = self.calculate_potential_profit(self.holding_symbol, price, order_count)
                            profit_percent = self.calculate_profit_percent(price, order_count)
                            holding_duration = (datetime.now(KYIV_TZ) - self.holding_time).total_seconds() / 60.0
                            stop_loss_price = self.holding_price * (1 - CONFIG["stop_loss_percent"] / 100)
                            price_change_percent = (price - self.holding_price) / self.holding_price * 100
                            price_change_usdt = price - self.holding_price

                            if profit_percent > self.max_profit_percent:
                                self.max_profit_percent = profit_percent

                            profit_color = Fore.LIGHTGREEN_EX if potential_profit > 0 else Fore.LIGHTRED_EX
                            price_change_color = Fore.LIGHTGREEN_EX if price_change_percent > 0 else Fore.LIGHTRED_EX
                            profit_percent_color = Fore.LIGHTGREEN_EX if profit_percent > 0 else Fore.LIGHTRED_EX
                            print(
                                Fore.CYAN + f"üîç \n[–ú–û–ù–Ü–¢–û–†–ò–ù–ì –ü–û–ó–ò–¶–Ü–á {self.holding_symbol}] {datetime.now(KYIV_TZ)}\n" +
                                Fore.MAGENTA + f"RSI: {rsi:.6f}\n" +
                                Fore.CYAN + f"–¶—ñ–Ω–∞ –∫—É–ø—ñ–≤–ª—ñ: {self.holding_price:.6f} USDT\n" +
                                Fore.CYAN + f"–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {price:.6f} USDT\n" +
                                price_change_color + f"–ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏: {price_change_percent:+.6f}%\n" +
                                price_change_color + f"–ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏: {price_change_usdt:+.6f} USDT\n" +
                                Fore.YELLOW + f"–°—Ç–æ–ø-–ª–æ—Å —Ü—ñ–Ω–∞: {stop_loss_price:.6f} USDT\n" +
                                Fore.BLUE + f"–£—Ç—Ä–∏–º—É–≤–∞–Ω–æ: {holding_duration:.2f} —Ö–≤–∏–ª–∏–Ω\n" +
                                profit_color + f"–ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: {potential_profit:.6f} USDT\n" +
                                profit_percent_color + f"–ß–∏—Å—Ç–∏–π –ø—Ä–æ—Ñ—ñ—Ç: {profit_percent:.6f}%\n" +
                                profit_percent_color + f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç: {self.max_profit_percent:.6f}%\n" +
                                Fore.CYAN + f"–ë–∞–ª–∞–Ω—Å: {self.balance['USDT']:.6f} USDT, {self.balance['ASSET']:.6f} {self.asset}\n"
                            )

                            if price <= stop_loss_price:
                                print(f"[–°–¢–û–ü-–õ–û–°] –¶—ñ–Ω–∞ –≤–ø–∞–ª–∞ –¥–æ {price:.6f} <= {stop_loss_price:.6f} ({CONFIG['stop_loss_percent']}% –∑–±–∏—Ç–∫—É).")
                                self.execute_sell(self.holding_symbol, price, order_count)

                            if profit_percent >= CONFIG["min_profit_percent"]:
                                self.min_sell_monitoring_mode = True
                                print(Fore.YELLOW + f"‚ö†Ô∏èüî•–ü—Ä–æ—Ñ—ñ—Ç –¥–æ—Å—è–≥ {profit_percent:.6f}, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ —Ä–µ–∂–∏–º –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –ø–∞–¥—ñ–Ω–Ω—è –Ω–∞ 0.10% —ñ –±—ñ–ª—å—à–µ.")

                            if self.min_sell_monitoring_mode:
                                profit_drop = self.max_profit_percent - profit_percent
                                if profit_drop >= CONFIG["profit_drop_percent"]:
                                    print(f"[–°–ò–ì–ù–ê–õ –ü–†–û–î–ê–ñ–£] –ü—Ä–æ—Ñ—ñ—Ç —É–ø–∞–≤ –Ω–∞ {profit_drop:.6f}% –≤—ñ–¥ –º–∞–∫—Å–∏–º—É–º—É {self.max_profit_percent:.6f}%.")
                                    self.execute_sell(self.holding_symbol, price, order_count)

                            if self.holding_symbol and self.holding_amount > 0:
                                if rsi >= CONFIG["rsi_high_threshold"] and not self.rsi_monitoring_mode:
                                    self.rsi_monitoring_mode = True
                                    print(Fore.MAGENTA + f"üß† RSI –¥–æ—Å—è–≥ {rsi:.6f}, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –≤ —Ä–µ–∂–∏–º –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É.")

                                if self.rsi_monitoring_mode:
                                    if CONFIG["rsi_high_threshold"] <= rsi <= CONFIG["rsi_high_max"]:
                                        if self.previous_rsi is not None and rsi < self.previous_rsi:
                                            print(Fore.LIGHTRED_EX + f"üî• [–°–ò–ì–ù–ê–õ –ü–†–û–î–ê–ñ–£] RSI –≤–ø–∞–≤ –∑ {self.previous_rsi:.6f} –¥–æ {rsi:.6f} —É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ {CONFIG['rsi_high_threshold']}‚Äì{CONFIG['rsi_high_max']}.")
                                            self.execute_sell(self.holding_symbol, price, order_count)
                                        else:
                                            print(
                                                Fore.CYAN + f"üîç \n[–ú–û–ù–Ü–¢–û–†–ò–ù–ì RSI {CONFIG['rsi_high_threshold']}‚Äì{CONFIG['rsi_high_max']} {self.holding_symbol}] {datetime.now(KYIV_TZ)}\n" +
                                                Fore.MAGENTA + f"RSI: {rsi:.6f} (–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π RSI: {self.previous_rsi if self.previous_rsi is not None else 'N/A'})\n" +
                                                Fore.CYAN + f"–¶—ñ–Ω–∞ –∫—É–ø—ñ–≤–ª—ñ: {self.holding_price:.6f} USDT\n" +
                                                Fore.CYAN + f"–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {price:.6f} USDT\n" +
                                                price_change_color + f"–ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏: {price_change_percent:+.6f}%\n" +
                                                price_change_color + f"–ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏: {price_change_usdt:+.6f} USDT\n" +
                                                Fore.YELLOW + f"–°—Ç–æ–ø-–ª–æ—Å —Ü—ñ–Ω–∞: {stop_loss_price:.6f} USDT\n" +
                                                Fore.BLUE + f"–£—Ç—Ä–∏–º—É–≤–∞–Ω–æ: {holding_duration:.2f} —Ö–≤–∏–ª–∏–Ω\n" +
                                                profit_color + f"–ü–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π –ø—Ä–∏–±—É—Ç–æ–∫: {potential_profit:.6f} USDT\n" +
                                                profit_percent_color + f"–ß–∏—Å—Ç–∏–π –ø—Ä–æ—Ñ—ñ—Ç: {profit_percent:.6f}%\n" +
                                                profit_percent_color + f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –ø—Ä–æ—Ñ—ñ—Ç: {self.max_profit_percent:.6f}%\n" +
                                                Fore.CYAN + f"–ë–∞–ª–∞–Ω—Å: {self.balance['USDT']:.6f} USDT, {self.balance['ASSET']:.6f} {self.asset}\n"
                                            )
                                    elif rsi < CONFIG["rsi_high_threshold"] and self.previous_rsi is not None and self.previous_rsi >= CONFIG["rsi_high_threshold"]:
                                        print(Fore.LIGHTRED_EX + f"üî• [–°–ò–ì–ù–ê–õ –ü–†–û–î–ê–ñ–£] RSI –≤–ø–∞–≤ –Ω–∏–∂—á–µ –ø–æ—Ä–æ–≥—É {CONFIG['rsi_high_threshold']} (–∑ {self.previous_rsi:.6f} –¥–æ {rsi:.6f}).")
                                        self.execute_sell(self.holding_symbol, price, order_count)

                                if self.rsi_monitoring_mode:
                                    self.previous_rsi = rsi

                        else:
                            print(Fore.YELLOW + f"‚ö†Ô∏è {self.holding_symbol}: –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É.")

                    except Exception as e:
                        print(Fore.RED + f"‚ùå –ü–æ–º–∏–ª–∫–∞ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É {self.holding_symbol}: {e}")
                        time.sleep(CONFIG["monitor_interval"])
                        continue

                time.sleep(CONFIG["monitor_interval"])

if __name__ == "__main__":
    trader = VirtualBinanceRSITrader()
    trader.run()